var p=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var h=(r,e)=>{for(var t in e)p(r,t,{get:e[t],enumerable:!0})},L=(r,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of u(e))!y.call(r,s)&&s!==t&&p(r,s,{get:()=>e[s],enumerable:!(o=d(e,s))||o.enumerable});return r};var w=r=>L(p({},"__esModule",{value:!0}),r);var I={};h(I,{handler:()=>E});module.exports=w(I);var m=require("@aws-sdk/client-sqs");var a=(s=>(s[s.DEBUG=0]="DEBUG",s[s.INFO=1]="INFO",s[s.WARN=2]="WARN",s[s.ERROR=3]="ERROR",s))(a||{}),n=class r{static{this.logLevel=1}constructor(e){this.context=e}static setLogLevel(e){if(typeof e=="string"){let t=e.toUpperCase();a[t]!==void 0&&(r.logLevel=a[t])}else r.logLevel=e}static initializeFromEnvironment(e){e&&r.setLogLevel(e)}formatMessage(e){return`[${new Date().toISOString()}] [${this.context}] ${e}`}debug(e,...t){r.logLevel<=0&&console.debug(this.formatMessage(e),...t)}info(e,...t){r.logLevel<=1&&console.info(this.formatMessage(e),...t)}warn(e,...t){r.logLevel<=2&&console.warn(this.formatMessage(e),...t)}error(e,t,...o){r.logLevel<=3&&console.error(this.formatMessage(e),t,...o)}};var l=class{constructor(e,t="us-east-1"){this.client=new m.SQSClient({region:t}),this.queueUrl=e,this.logger=new n("SQSService")}async sendMessage(e){let t={QueueUrl:this.queueUrl,MessageBody:JSON.stringify(e),MessageAttributes:{MessageType:{DataType:"String",StringValue:"IngestionMessage"}}};try{let o=new m.SendMessageCommand(t);this.logger.debug("Sending message to SQS",{queueUrl:this.queueUrl});let s=await this.client.send(o);return this.logger.debug("Message sent successfully",{messageId:s.MessageId}),s.MessageId||""}catch(o){throw this.logger.error("Error sending message to SQS",o),o}}};var v=class{constructor(e){this.sqsService=e,this.logger=new n("IngestionService")}async processS3Event(e){if(!e.Records||e.Records.length===0)return this.logger.warn("No records found in S3 event"),[];let t=[];for(let o of e.Records)try{let s=o.s3.bucket.name,g=decodeURIComponent(o.s3.object.key.replace(/\+/g," "));this.logger.debug("Processing S3 record",{bucketName:s,objectKey:g});let c={bucketName:s,objectKey:g,timestamp:new Date().toISOString(),metadata:{eventTime:o.eventTime||new Date().toISOString(),eventName:o.eventName||"ObjectCreated",fileSize:o.s3.object.size?.toString()||"0"}},S=await this.sqsService.sendMessage(c);t.push(S),this.logger.info(`Successfully queued ingestion task for ${s}/${g}`,{messageId:S})}catch(s){throw this.logger.error("Error processing S3 record",s),s}return t}};var i={aws:{region:process.env.AWS_REGION||"us-east-1",sqs:{queueUrl:process.env.SQS_QUEUE_URL||""}},logger:{level:process.env.LOG_LEVEL||"INFO"}};var f=new n("S3EventHandler");if(i.logger?.level)try{let r=i.logger.level.toUpperCase();a[r]!==void 0&&n.setLogLevel(a[r])}catch{f.warn(`Invalid log level: ${i.logger.level}`)}var E=async(r,e,t)=>{f.info("S3 event received",{event:r});try{if(!i.aws.sqs.queueUrl)throw new Error("SQS_QUEUE_URL environment variable is not defined");let o=new l(i.aws.sqs.queueUrl,i.aws.region),g=await new v(o).processS3Event(r);f.info(`Successfully processed ${g.length} records`);let c={messageIds:g};return t&&t(null,c),c}catch(o){throw f.error("Error in S3 event handler",o),t&&t(o),o}};0&&(module.exports={handler});
