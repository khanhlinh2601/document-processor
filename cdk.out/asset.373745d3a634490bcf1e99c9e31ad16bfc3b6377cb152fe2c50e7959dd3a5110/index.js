var f=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var C=(n,t)=>{for(var e in t)f(n,e,{get:t[e],enumerable:!0})},E=(n,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of w(t))!x.call(n,s)&&s!==e&&f(n,s,{get:()=>t[s],enumerable:!(r=P(t,s))||r.enumerable});return n};var F=n=>E(f({},"__esModule",{value:!0}),n);var R={};C(R,{handler:()=>v});module.exports=F(R);var y={info:(...n)=>console.log("[INFO]",...n),error:(...n)=>console.error("[ERROR]",...n)};var m=require("@aws-sdk/client-s3"),d=class{constructor(){if(this.region=process.env.AWS_REGION||"us-east-1",this.bucketName=process.env.S3_BUCKET_NAME||"",!this.bucketName)throw new Error("S3_BUCKET_NAME environment variable is not set");this.s3Client=new m.S3Client({region:this.region})}async uploadFile(t){let r=`uploads/${Date.now()}-${t.originalname}`,s={Bucket:this.bucketName,Key:r,Body:t.buffer,ContentType:t.mimetype};return await this.s3Client.send(new m.PutObjectCommand(s)),{key:r,url:`https://${this.bucketName}.s3.${this.region}.amazonaws.com/${r}`,filename:t.originalname}}async uploadFiles(t){let e=t.map(r=>this.uploadFile(r));return Promise.all(e)}};var u=class{static async parse(t){if(!t.body)throw new Error("Request body is empty");if(!t.headers["content-type"]?.includes("multipart/form-data"))throw new Error("Content-Type must be multipart/form-data");let e=this.extractBoundary(t.headers["content-type"]);if(!e)throw new Error("Boundary not found in Content-Type header");let r=t.isBase64Encoded?Buffer.from(t.body,"base64").toString("binary"):t.body,s=this.getParts(r,e),i=[];for(let a of s){let{headers:o,content:l}=this.parsePart(a),c=o["content-disposition"];if(c&&c.includes("filename=")){let p=this.extractFieldname(c),h=this.extractFilename(c),b=o["content-type"]||"application/octet-stream",g=Buffer.from(l,"binary");i.push({fieldname:p,originalname:h,mimetype:b,buffer:g,size:g.length})}}return i}static extractBoundary(t){let e=t.match(/boundary=(?:"([^"]+)"|([^;]+))/i);return e?e[1]||e[2]:null}static extractFieldname(t){let e=t.match(/name="([^"]+)"/i);return e?e[1]:""}static extractFilename(t){let e=t.match(/filename="([^"]+)"/i);return e?e[1]:""}static getParts(t,e){let r=[],s=`--${e}`,i=t.split(new RegExp(`${s}(?:--)?\r
?`));for(let a=1;a<i.length-1;a++){let o=i[a];o&&o.trim().length>0&&r.push(o)}return r}static parsePart(t){let e=t.indexOf(`\r
\r
`);if(e===-1)return{headers:{},content:t};let r=t.substring(0,e),s=t.substring(e+4),i={},a=r.split(`\r
`);for(let o of a){let l=o.indexOf(":");if(l!==-1){let c=o.substring(0,l).trim().toLowerCase(),p=o.substring(l+1).trim();i[c]=p}}return{headers:i,content:s}}};var v=async n=>{try{let t=await u.parse(n);if(t.length===0)return{statusCode:400,body:JSON.stringify({message:"No files were uploaded"})};let r=await new d().uploadFiles(t);return{statusCode:200,body:JSON.stringify({message:`Successfully uploaded ${t.length} file(s)`,files:r})}}catch(t){return y.error("Upload failed",t),{statusCode:t.message.includes("Content-Type")?400:500,body:JSON.stringify({message:"Upload failed",error:t.message})}}};0&&(module.exports={handler});
