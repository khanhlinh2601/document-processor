var h=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var E=(s,e)=>{for(var t in e)h(s,t,{get:e[t],enumerable:!0})},R=(s,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of x(e))!C.call(s,r)&&r!==t&&h(s,r,{get:()=>e[r],enumerable:!(n=P(e,r))||n.enumerable});return s};var U=s=>R(h({},"__esModule",{value:!0}),s);var N={};E(N,{handler:()=>F});module.exports=U(N);var b=(r=>(r[r.DEBUG=0]="DEBUG",r[r.INFO=1]="INFO",r[r.WARN=2]="WARN",r[r.ERROR=3]="ERROR",r))(b||{}),a=class s{static{this.logLevel=1}constructor(e){this.context=e}static setLogLevel(e){if(typeof e=="string"){let t=e.toUpperCase();b[t]!==void 0&&(s.logLevel=b[t])}else s.logLevel=e}static initializeFromEnvironment(e){e&&s.setLogLevel(e)}formatMessage(e){return`[${new Date().toISOString()}] [${this.context}] ${e}`}debug(e,...t){s.logLevel<=0&&console.debug(this.formatMessage(e),...t)}info(e,...t){s.logLevel<=1&&console.info(this.formatMessage(e),...t)}warn(e,...t){s.logLevel<=2&&console.warn(this.formatMessage(e),...t)}error(e,t,...n){s.logLevel<=3&&console.error(this.formatMessage(e),t,...n)}};var p=require("@aws-sdk/client-s3");var m=class{constructor(){if(this.region=process.env.AWS_REGION||"us-east-1",this.bucketName=process.env.S3_BUCKET_NAME||"",this.logger=new a("S3UploadService"),!this.bucketName)throw new Error("S3_BUCKET_NAME environment variable is not set");this.s3Client=new p.S3Client({region:this.region})}async uploadFile(e){let n=`uploads/${Date.now()}-${e.originalname}`;this.logger.debug(`Uploading file: ${e.originalname}`,{size:e.size,mimetype:e.mimetype});let r={Bucket:this.bucketName,Key:n,Body:e.buffer,ContentType:e.mimetype};return await this.s3Client.send(new p.PutObjectCommand(r)),this.logger.info(`Successfully uploaded file: ${e.originalname}`,{key:n}),{key:n,url:`https://${this.bucketName}.s3.${this.region}.amazonaws.com/${n}`,filename:e.originalname}}async uploadFiles(e){this.logger.info(`Uploading ${e.length} file(s)`);let t=e.map(n=>this.uploadFile(n));return Promise.all(t)}};var u=class{static{this.logger=new a("MultipartParser")}static async parse(e){if(!e.body)throw this.logger.error("Request body is empty"),new Error("Request body is empty");if(!e.headers["content-type"]?.includes("multipart/form-data"))throw this.logger.error("Invalid content type",{contentType:e.headers["content-type"]}),new Error("Content-Type must be multipart/form-data");let t=this.extractBoundary(e.headers["content-type"]);if(!t)throw this.logger.error("Boundary not found in Content-Type header"),new Error("Boundary not found in Content-Type header");this.logger.debug("Parsing multipart/form-data",{boundary:t});let n=e.isBase64Encoded?Buffer.from(e.body,"base64").toString("binary"):e.body,r=this.getParts(n,t);this.logger.debug(`Found ${r.length} parts in request`);let i=[];for(let l of r){let{headers:o,content:c}=this.parsePart(l),g=o["content-disposition"];if(g&&g.includes("filename=")){let d=this.extractFieldname(g),v=this.extractFilename(g),w=o["content-type"]||"application/octet-stream",y=Buffer.from(c,"binary");this.logger.debug("Parsed file from request",{fieldname:d,filename:v,contentType:w,size:y.length}),i.push({fieldname:d,originalname:v,mimetype:w,buffer:y,size:y.length})}}return this.logger.info(`Successfully parsed ${i.length} files from request`),i}static extractBoundary(e){let t=e.match(/boundary=(?:"([^"]+)"|([^;]+))/i);return t?t[1]||t[2]:null}static extractFieldname(e){let t=e.match(/name="([^"]+)"/i);return t?t[1]:""}static extractFilename(e){let t=e.match(/filename="([^"]+)"/i);return t?t[1]:""}static getParts(e,t){let n=[],r=`--${t}`,i=e.split(new RegExp(`${r}(?:--)?\r
?`));for(let l=1;l<i.length-1;l++){let o=i[l];o&&o.trim().length>0&&n.push(o)}return n}static parsePart(e){let t=e.indexOf(`\r
\r
`);if(t===-1)return{headers:{},content:e};let n=e.substring(0,t),r=e.substring(t+4),i={},l=n.split(`\r
`);for(let o of l){let c=o.indexOf(":");if(c!==-1){let g=o.substring(0,c).trim().toLowerCase(),d=o.substring(c+1).trim();i[g]=d}}return{headers:i,content:r}}};var f=new a("UploadHandler"),F=async s=>{try{let e=await u.parse(s);if(e.length===0)return f.warn("No files were uploaded"),{statusCode:400,body:JSON.stringify({message:"No files were uploaded"})};f.info(`Processing ${e.length} file(s) for upload`);let n=await new m().uploadFiles(e);return f.info(`Successfully uploaded ${e.length} file(s)`),{statusCode:200,body:JSON.stringify({message:`Successfully uploaded ${e.length} file(s)`,files:n})}}catch(e){return f.error("Upload failed",e),{statusCode:e.message.includes("Content-Type")?400:500,body:JSON.stringify({message:"Upload failed",error:e.message})}}};0&&(module.exports={handler});
